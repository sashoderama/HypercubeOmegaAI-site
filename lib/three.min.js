// three-init.js
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js'

export function initThreeScene({
  containerId = 'three-container',
  fov = 70,
  near = 0.1,
  far = 1000,
  clearColor = 0x000000,
  cameraZ = 10,
  enableOrbit = true,
  onFrame = null
} = {}) {
  const container = document.getElementById(containerId)
  if (!container) throw new Error(`Container #${containerId} not found`)

  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(fov, container.clientWidth / container.clientHeight, near, far)
  camera.position.z = cameraZ

  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })
  renderer.setSize(container.clientWidth, container.clientHeight)
  renderer.setClearColor(clearColor, 0)
  container.appendChild(renderer.domElement)

  const ambientLight = new THREE.AmbientLight(0xffffff, 0.8)
  scene.add(ambientLight)

  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6)
  directionalLight.position.set(10, 10, 10)
  scene.add(directionalLight)

  if (enableOrbit) {
    import('https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/controls/OrbitControls.js').then(module => {
      const controls = new module.OrbitControls(camera, renderer.domElement)
      controls.enableDamping = true
      controls.dampingFactor = 0.05
      controls.update()
    })
  }

  function animate() {
    requestAnimationFrame(animate)
    if (onFrame) onFrame({ scene, camera, renderer })
    renderer.render(scene, camera)
  }

  animate()

  window.addEventListener('resize', () => {
    camera.aspect = container.clientWidth / container.clientHeight
    camera.updateProjectionMatrix()
    renderer.setSize(container.clientWidth, container.clientHeight)
  })

  return { scene, camera, renderer }
}
